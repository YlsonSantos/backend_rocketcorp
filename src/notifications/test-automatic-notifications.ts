import { NestFactory } from '@nestjs/core';
import { AppModule } from '../app.module';
import { AutomaticNotificationsService } from './automatic-notifications.service';
import { PrismaService } from '../../prisma/prisma.service';

async function testAutomaticNotifications() {
  const app = await NestFactory.createApplicationContext(AppModule);
  
  try {
    const automaticNotificationsService = app.get(AutomaticNotificationsService);
    const prisma = app.get(PrismaService);

    console.log('üß™ Testando sistema de notifica√ß√µes autom√°ticas...\n');

    // 1. Testar verifica√ß√£o de prazos de avalia√ß√£o
    console.log('1. Testando verifica√ß√£o de prazos de avalia√ß√£o...');
    await automaticNotificationsService.checkEvaluationDeadlines();
    console.log('‚úÖ Verifica√ß√£o de prazos conclu√≠da\n');

    // 2. Testar verifica√ß√£o de in√≠cio de ciclos
    console.log('2. Testando verifica√ß√£o de in√≠cio de ciclos...');
    await automaticNotificationsService.checkCycleStart();
    console.log('‚úÖ Verifica√ß√£o de in√≠cio de ciclos conclu√≠da\n');

    // 3. Testar verifica√ß√£o de fim de ciclos
    console.log('3. Testando verifica√ß√£o de fim de ciclos...');
    await automaticNotificationsService.checkCycleEnd();
    console.log('‚úÖ Verifica√ß√£o de fim de ciclos conclu√≠da\n');

    // 4. Testar verifica√ß√£o de prazos de metas
    console.log('4. Testando verifica√ß√£o de prazos de metas...');
    await automaticNotificationsService.checkGoalDeadlines();
    console.log('‚úÖ Verifica√ß√£o de prazos de metas conclu√≠da\n');

    // 5. Testar verifica√ß√£o de novas pesquisas
    console.log('5. Testando verifica√ß√£o de novas pesquisas...');
    await automaticNotificationsService.checkNewSurveys();
    console.log('‚úÖ Verifica√ß√£o de novas pesquisas conclu√≠da\n');

    // 6. Testar lembretes de pesquisas
    console.log('6. Testando lembretes de pesquisas...');
    await automaticNotificationsService.sendSurveyReminders();
    console.log('‚úÖ Lembretes de pesquisas conclu√≠dos\n');

    // 7. Testar verifica√ß√£o de avalia√ß√µes de mentoria
    console.log('7. Testando verifica√ß√£o de avalia√ß√µes de mentoria...');
    await automaticNotificationsService.checkMentorshipEvaluations();
    console.log('‚úÖ Verifica√ß√£o de avalia√ß√µes de mentoria conclu√≠da\n');

    // 8. Verificar notifica√ß√µes criadas
    console.log('8. Verificando notifica√ß√µes criadas...');
    const notifications = await prisma.notification.findMany({
      take: 10,
      orderBy: { createdAt: 'desc' },
      include: {
        user: {
          select: { name: true, email: true },
        },
      },
    });

    console.log(`üìä Total de notifica√ß√µes encontradas: ${notifications.length}`);
    notifications.forEach((notification, index) => {
      console.log(`${index + 1}. ${notification.title} - ${notification.user.name} (${notification.type})`);
    });

    console.log('\nüéâ Teste do sistema de notifica√ß√µes autom√°ticas conclu√≠do!');

  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error);
  } finally {
    await app.close();
  }
}

// Executar o teste se este arquivo for executado diretamente
if (require.main === module) {
  testAutomaticNotifications();
}

export { testAutomaticNotifications }; 