// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model EvaluationAnswer {
  id            String    @id @default(uuid())
  evaluationId  String
  criterionId   String
  score         Float
  justification String

  evaluation    Evaluation  @relation(fields: [evaluationId], references: [id])
  criterion     EvaluationCriterion @relation(fields: [criterionId], references: [id])
}

model CriteriaAssignment {
  id          String   @id @default(uuid())
  criterionId String
  positionId  String
  isRequired  Boolean  @default(false)

  criterion   EvaluationCriterion @relation(fields: [criterionId], references: [id])
  position    Position  @relation(fields: [positionId], references: [id])
}

model EvaluationCriterion {
  id          String    @id @default(uuid())
  title       String
  description String
  type        CriterionType

  assignments CriteriaAssignment[]
  answers     EvaluationAnswer[]
}

model TeamMember {
  id      String @id @default(uuid())
  userId  String
  teamId  String

  user    User  @relation(fields: [userId], references: [id])
  team    Team  @relation(fields: [teamId], references: [id])
}

model Team {
  id           String            @id @default(uuid())
  name         String
  members      TeamMember[]
  evaluations  Evaluation[]
}

model Position {
  id           String   @id @default(uuid())
  name         String
  track        TrackType

  users        User[]
  criteriaAssignments CriteriaAssignment[]
}

model Evaluation {
  id           String   @id @default(uuid())
  type         EvaluationType
  cycleId      String
  evaluatorId  String
  evaluatedId  String
  teamId       String
  createdAt    DateTime @default(now())
  completed    Boolean

  cycle        EvaluationCycle @relation(fields: [cycleId], references: [id])
  evaluator    User            @relation("Evaluator", fields: [evaluatorId], references: [id])
  evaluated    User            @relation("Evaluated", fields: [evaluatedId], references: [id])
  team         Team            @relation(fields: [teamId], references: [id])
  answers      EvaluationAnswer[]

  @@unique([type, evaluatorId, evaluatedId, cycleId])

}

model Reference {
  id             String @id @default(uuid())
  cycleId        String
  evaluatorId    String
  referencedId   String
  theme          String
  justification  String

  evaluator      User @relation("RefEvaluator", fields: [evaluatorId], references: [id])
  referenced     User @relation("RefReferenced", fields: [referencedId], references: [id])
  @@unique([evaluatorId, referencedId, cycleId])

}

model User {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  password     String
  role         Role
  positionId   String
  managerId    String?

  mentorId     String?  @unique
  mentor       User?    @relation("Mentoria", fields: [mentorId], references: [id])
  mentorado    User?    @relation("Mentoria")

  position     Position @relation(fields: [positionId], references: [id])
  manager      User?    @relation("Manager", fields: [managerId], references: [id])
  subordinates User[]   @relation("Manager")

  evaluationsGiven    Evaluation[] @relation("Evaluator")
  evaluationsReceived Evaluation[] @relation("Evaluated")
  teamMemberships     TeamMember[]
  auditLogs           AuditLog[]
  referencesGiven     Reference[] @relation("RefEvaluator")
  referencesReceived  Reference[] @relation("RefReferenced")
  scorePerCycle       ScorePerCycle[]
  genaiInsights       GenaiInsight[]

  mentorEvaluations   MentorshipEvaluation[] @relation("MentorEvaluation")
  menteeEvaluations   MentorshipEvaluation[] @relation("MenteeEvaluation")

  surveyResponses SurveyResponse[]
}

model AuditLog {
  id        String   @id @default(uuid())
  userId    String
  action    String
  table     String
  timestamp DateTime @default(now())
  metadata  Json

  user      User     @relation(fields: [userId], references: [id])
}

model GenaiInsight {
  id            String   @id @default(uuid())
  cycleId       String
  evaluatedId   String
  summary       String
  discrepancies String
  brutalFacts   String

  cycle         EvaluationCycle @relation(fields: [cycleId], references: [id])
  evaluated     User            @relation(fields: [evaluatedId], references: [id])
}

model EvaluationCycle {
  id        String   @id @default(uuid())
  name      String
  startDate DateTime
  reviewDate DateTime
  endDate   DateTime

  evaluations   Evaluation[]
  insights      GenaiInsight[]
  scores        ScorePerCycle[]

  mentorshipEvaluations MentorshipEvaluation[]
  surveys Survey[]
}

model ScorePerCycle {
  id           String   @id @default(uuid())
  userId       String
  cycleId      String

  selfScore    Float   
  leaderScore  Float?  
  finalScore  Float?   

  feedback     String?
  createdAt    DateTime @default(now())

  user         User     @relation(fields: [userId], references: [id])
  cycle        EvaluationCycle @relation(fields: [cycleId], references: [id])

  peerScores   PeerScore[]    

  @@unique([userId, cycleId])
}

model PeerScore {
  id             String   @id @default(uuid())
  scorePerCycleId String
  value          Float

  scorePerCycle  ScorePerCycle @relation(fields: [scorePerCycleId], references: [id])

  @@index([scorePerCycleId])
}

model MentorshipEvaluation {
  id          String   @id @default(uuid())
  mentorId    String
  menteeId    String
  cycleId     String
  score       Float
  feedback    String
  createdAt   DateTime @default(now())

  mentor      User            @relation("MentorEvaluation", fields: [mentorId], references: [id])
  mentee      User            @relation("MenteeEvaluation", fields: [menteeId], references: [id])
  cycle       EvaluationCycle @relation(fields: [cycleId], references: [id])

  @@unique([mentorId, menteeId, cycleId])
}

model Survey {
  id            String          @id @default(uuid())
  cycleId       String
  title         String
  description   String?
  createdAt     DateTime        @default(now())
  endDate       DateTime 

  cycle         EvaluationCycle @relation(fields: [cycleId], references: [id])
  questions     SurveyQuestion[]
  responses     SurveyResponse[]

  @@index([cycleId])
}

model SurveyQuestion {
  id        String   @id @default(uuid())
  surveyId  String
  text      String   // texto da pergunta
  type      QuestionType

  survey    Survey   @relation(fields: [surveyId], references: [id])
  answers   SurveyAnswer[]

  @@index([surveyId])
}

model SurveyResponse {
  id        String   @id @default(uuid())
  surveyId  String
  // userId pode ser nulo para garantir anonimato
  userId    String?  
  createdAt DateTime @default(now())

  survey    Survey   @relation(fields: [surveyId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])

  answers   SurveyAnswer[]
  
  @@index([surveyId])
}

model SurveyAnswer {
  id           String          @id @default(uuid())
  responseId   String
  questionId   String
  answerText   String?         // resposta textual
  answerScore  Float?          // resposta numérica (se aplicável)

  response     SurveyResponse  @relation(fields: [responseId], references: [id])
  question     SurveyQuestion  @relation(fields: [questionId], references: [id])

  @@index([responseId])
  @@index([questionId])
}

enum QuestionType {
  TEXT
  NUMBER
  YESORNO
}

enum CriterionType {
  GESTAO
  EXECUCAO
  COMPORTAMENTO
  AV360
  FROMETL
}

enum EvaluationType {
  AUTO
  LIDER
  PAR
}

enum Role {
  COLABORADOR
  LIDER
  COMITE
  RH
}

enum TrackType {
  DESENVOLVIMENTO
  DESIGN
  FINANCEIRO
  COMITE
  RH
}

// add this block only if using Prisma 4.0+ and seeding in TypeScript
// if your Prisma is >= v4.7.0+, this is supported

// (skip this if already configured in a `prisma/seed.ts`)
